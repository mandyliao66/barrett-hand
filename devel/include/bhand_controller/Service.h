// Generated by gencpp from file bhand_controller/Service.msg
// DO NOT EDIT!


#ifndef BHAND_CONTROLLER_MESSAGE_SERVICE_H
#define BHAND_CONTROLLER_MESSAGE_SERVICE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace bhand_controller
{
template <class ContainerAllocator>
struct Service_
{
  typedef Service_<ContainerAllocator> Type;

  Service_()
    {
    }
  Service_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }





// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(INIT_HAND)
  #undef INIT_HAND
#endif
#if defined(_WIN32) && defined(CLOSE_GRASP)
  #undef CLOSE_GRASP
#endif
#if defined(_WIN32) && defined(OPEN_GRASP)
  #undef OPEN_GRASP
#endif
#if defined(_WIN32) && defined(SET_GRASP_1)
  #undef SET_GRASP_1
#endif
#if defined(_WIN32) && defined(SET_GRASP_2)
  #undef SET_GRASP_2
#endif
#if defined(_WIN32) && defined(CLOSE_HALF_GRASP)
  #undef CLOSE_HALF_GRASP
#endif
#if defined(_WIN32) && defined(TARE_FTS)
  #undef TARE_FTS
#endif

  enum {
    INIT_HAND = 1,
    CLOSE_GRASP = 2,
    OPEN_GRASP = 3,
    SET_GRASP_1 = 4,
    SET_GRASP_2 = 5,
    CLOSE_HALF_GRASP = 6,
    TARE_FTS = 7,
  };


  typedef boost::shared_ptr< ::bhand_controller::Service_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bhand_controller::Service_<ContainerAllocator> const> ConstPtr;

}; // struct Service_

typedef ::bhand_controller::Service_<std::allocator<void> > Service;

typedef boost::shared_ptr< ::bhand_controller::Service > ServicePtr;
typedef boost::shared_ptr< ::bhand_controller::Service const> ServiceConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bhand_controller::Service_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bhand_controller::Service_<ContainerAllocator> >::stream(s, "", v);
return s;
}


} // namespace bhand_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::bhand_controller::Service_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bhand_controller::Service_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bhand_controller::Service_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bhand_controller::Service_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bhand_controller::Service_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bhand_controller::Service_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bhand_controller::Service_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c09093085862e16e122942cf27b990b9";
  }

  static const char* value(const ::bhand_controller::Service_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc09093085862e16eULL;
  static const uint64_t static_value2 = 0x122942cf27b990b9ULL;
};

template<class ContainerAllocator>
struct DataType< ::bhand_controller::Service_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bhand_controller/Service";
  }

  static const char* value(const ::bhand_controller::Service_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bhand_controller::Service_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# constants\n"
"int32 INIT_HAND = 1\n"
"int32 CLOSE_GRASP = 2\n"
"int32 OPEN_GRASP = 3\n"
"int32 SET_GRASP_1 = 4\n"
"int32 SET_GRASP_2 = 5\n"
"int32 CLOSE_HALF_GRASP = 6\n"
"int32 TARE_FTS = 7\n"
"\n"
;
  }

  static const char* value(const ::bhand_controller::Service_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bhand_controller::Service_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Service_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bhand_controller::Service_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::bhand_controller::Service_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // BHAND_CONTROLLER_MESSAGE_SERVICE_H
